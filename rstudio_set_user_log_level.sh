#!/bin/bash

# Script to set the log-level in RStudio's logging configuration file
# The script will prompt the user to select a log-level from the following options:
#   1) debug
#   2) info
#   3) warn
#   4) error
# If the user does not provide an input, the log-level will default to 'warn' (or other specified default value)
# The script will update the log-level in the logging configuration file located at $HOME/.rstudio/logging.conf

FILE="$HOME/.rstudio/logging.conf"
DEFAULT_LOG_LEVEL="warn"

# Function to print messages in color
print_color_same_line() {
    echo -ne "\033[${2}m${1}\033[0m"
}

# Check if running on macOS and adjust SED_EXT
if [[ "$(uname)" == "Darwin" ]]; then
    SED_EXT="-i ''" # macOS requires an empty string argument with -i
else
    SED_EXT="-i" # Linux and others
fi

# Print log-level information
print_color_same_line "\n" 97
print_color_same_line ">> " 97
print_color_same_line "log-level" 32
print_color_same_line " determines the verbosity of the logs generated by RStudio." 37
print_color_same_line "\n" 97
echo

##############################################################
# Condition 1 - Check if the logging configuration file exists
##############################################################

if [ ! -f "$FILE" ]; then
    print_color_same_line "   " 97
    print_color_same_line "$FILE" 96
    print_color_same_line " does not exist." 95
    print_color_same_line " No action taken." 96
    print_color_same_line "\n" 97
    echo
    exit 1
fi

##############################################################
# Condition 2 - Check if the log-level entry exists
##############################################################

# If log-level entry is not found, add it with the default value
if ! grep -q "^log-level[ =]*.*" "$FILE"; then
    print_color_same_line "   " 97
    print_color_same_line "log-level entry not found. Adding 'log-level=" 36
    print_color_same_line $DEFAULT_LOG_LEVEL 33
    print_color_same_line "' as default." 36
    print_color_same_line "\n" 97
    echo
    echo "log-level=$DEFAULT_LOG_LEVEL" >> "$FILE"
    print_color_same_line "   " 97
    print_color_same_line "log-level set to " 96
    print_color_same_line "$DEFAULT_LOG_LEVEL" 33
    print_color_same_line " in $FILE" 96
    print_color_same_line "\n" 97
    echo
    exit 1
fi

##############################################################
# Condition 3 - Extract the current log-level and prompt user
##############################################################

# Extract the current log level
current_log_level=$(awk -F"[[:space:]]*=[[:space:]]*" '/log-level[[:space:]]*=[[:space:]]*/ {print $2; exit}' "$FILE")

# Print the current level
print_color_same_line "   " 97
print_color_same_line "Current log-level is: " 36
if [[ -z "$current_log_level" ]]; then
    print_color_same_line "empty" 90
else
    print_color_same_line "$current_log_level" 33
fi
echo

# Print to select the new level
print_color_same_line "   " 97
print_color_same_line "Select new log-level (if empty, it will default to " 36
print_color_same_line $DEFAULT_LOG_LEVEL 33
print_color_same_line "): " 36
echo

# Define options with colors
options=("debug" "info" "warn" "error")
colored_options=("\033[33mdebug\033[0m" "\033[33minfo\033[0m" "\033[33mwarn\033[0m" "\033[33merror\033[0m")

# Display options with colors
for i in "${!options[@]}"; do
    print_color_same_line "   " 97
    echo -e "$((i+1))) ${colored_options[$i]}"
done

# Prompt user for selection
while true; do
    print_color_same_line "   " 97
    print_color_same_line "Please select an option (1-${#options[@]}): " 36
    read -r selection

    # Default to DEFAULT_LOG_LEVEL if no input is provided
    if [[ -z "$selection" ]]; then
        new_log_level=$DEFAULT_LOG_LEVEL
        break
    elif [[ "$selection" =~ ^[0-9]+$ ]] && (( selection >= 1 && selection <= ${#options[@]} )); then
        new_log_level="${options[$((selection-1))]}"
        break
    else
        print_color_same_line "   " 97
        print_color_same_line "Invalid option. Please try again." 91
        echo
    fi
done

# Replace the log-level in the file
new_log_level=${new_log_level:-$DEFAULT_LOG_LEVEL}
SED_COMMAND="s/^log-level[ =]*.*/log-level=$new_log_level/"
eval "sed $SED_EXT '$SED_COMMAND' \"$FILE\""
print_color_same_line "\n" 97
print_color_same_line "   " 97
print_color_same_line "log-level set to " 96
print_color_same_line "$new_log_level" 33
print_color_same_line " in $FILE" 96
print_color_same_line "\n" 97
echo

exit 0
